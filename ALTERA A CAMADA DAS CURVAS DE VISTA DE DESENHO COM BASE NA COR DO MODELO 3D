' Main é sempre o primeiro método em código iLogic estilo VB.NET
Public Sub Main()
    ChangeLayerOfOccurrenceCurves()
End Sub

Public Sub ChangeLayerOfOccurrenceCurves()
    ' Obter o documento de desenho ativo
    Dim drawDoc As DrawingDocument = ThisApplication.ActiveDocument

    ' Solicitar ao usuário que selecione uma vista
    Dim drawView As DrawingView = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingViewFilter, "Select a drawing view.")

    Dim docDesc As DocumentDescriptor = drawView.ReferencedDocumentDescriptor

    ' Verifica se a vista é de um conjunto (assembly)
    If docDesc.ReferencedDocumentType <> DocumentTypeEnum.kAssemblyDocumentObject Then
        MsgBox("The selected view must be of an assembly.")
        Exit Sub
    End If

    ' Obter definição do componente do conjunto
    Dim asmDef As AssemblyComponentDefinition = docDesc.ReferencedDocument.ComponentDefinition

    ' Iniciar transação para que a ação possa ser desfeita
    Dim trans As Transaction = ThisApplication.TransactionManager.StartTransaction(drawDoc, "Change drawing view color")

    ' Chamar função recursiva
    ProcessAssemblyColor(drawView, asmDef.Occurrences)
    trans.End()
End Sub

Private Sub ProcessAssemblyColor(drawView As DrawingView, Occurrences As ComponentOccurrences)
    ' Iterar pelas ocorrências
    For Each occ As ComponentOccurrence In Occurrences
        ' Verificar se é peça ou conjunto
        If occ.DefinitionDocumentType = DocumentTypeEnum.kPartDocumentObject Then
            ' Obter estilo de renderização
            Dim renderStyle As RenderStyle
            Dim sourceType As StyleSourceTypeEnum
            renderStyle = occ.GetRenderStyle(sourceType)

            Dim transObjs As TransientObjects = ThisApplication.TransientObjects

            ' Obter camadas do documento de desenho
            Dim drawDoc As DrawingDocument = drawView.Parent.Parent
            Dim layers As LayersEnumerator = drawDoc.StylesManager.Layers

            On Error Resume Next
            Dim colorLayer As Layer = layers.Item(renderStyle.Name)
            On Error GoTo 0

            ' Se a camada não existir, criar uma nova com base na cor
            If colorLayer Is Nothing Then
                Dim red As Byte, green As Byte, blue As Byte
                renderStyle.GetDiffuseColor(red, green, blue)
                Dim newColor As Color = transObjs.CreateColor(red, green, blue)

                ' Copiar camada existente e renomear
                colorLayer = layers.Item(1).Copy(renderStyle.Name)
                colorLayer.Color = newColor
                colorLayer.LineType = LineTypeEnum.kContinuousLineType
                colorLayer.LineWeight = 0.02
            End If

            ' Obter curvas do desenho associadas a esta ocorrência
            On Error Resume Next
            Dim drawCurves As DrawingCurvesEnumerator = drawView.DrawingCurves(occ)
            On Error GoTo 0

            If Not drawCurves Is Nothing Then
                Dim objColl As ObjectCollection = transObjs.CreateObjectCollection()

                For Each drawCurve As DrawingCurve In drawCurves
                    For Each segment As DrawingCurveSegment In drawCurve.Segments
                        objColl.Add(segment)
                    Next
                Next

                drawView.Parent.ChangeLayer(objColl, colorLayer)
            End If
        Else
            ' Caso seja um subassembly, processar recursivamente
            ProcessAssemblyColor(drawView, occ.SubOccurrences)
        End If
    Next
End Sub

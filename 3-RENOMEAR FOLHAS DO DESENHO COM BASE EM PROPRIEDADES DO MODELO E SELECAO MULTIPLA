Sub Main()
    If Not TypeOf ThisDoc.Document Is DrawingDocument Then Exit Sub

    Dim dwgDoc As DrawingDocument = ThisDoc.Document
    Dim DebugMode As Boolean = False
    Dim NomeMaxDescricao As Integer = 50

    ' Obtem todos os nomes das folhas
    Dim allSheetNames As New List(Of String)
    For Each sht As Sheet In dwgDoc.Sheets
        allSheetNames.Add(sht.Name)
    Next

    ' Seleção múltipla de folhas
    Dim selectedSheets As IEnumerable(Of Object) = MultiSelectListBox("Selecione as folhas para renomear:", allSheetNames, Nothing, "Renomear Folhas", "Folhas do desenho")

    If selectedSheets Is Nothing OrElse selectedSheets.Count = 0 Then
        MsgBox("Nenhuma folha foi selecionada.")
        Exit Sub
    End If

    ' Obtém o BOM da montagem principal
    Dim BOMRows As BOMRowsEnumerator = GetBOMRows()
    If BOMRows Is Nothing Then
        MsgBox("Erro ao obter o BOM da montagem principal.")
        Exit Sub
    End If

    Dim renomeadas As New System.Text.StringBuilder
    Dim novosNomes As New List(Of String)

    ' Loop pelas folhas selecionadas
    For Each dwgSheet As Sheet In dwgDoc.Sheets
        If selectedSheets.Contains(dwgSheet.Name) Then
            Try
                If dwgSheet.DrawingViews.Count > 0 Then
                    Dim refView As DrawingView = dwgSheet.DrawingViews(1)
                    Dim refDoc As Document = refView.ReferencedDocumentDescriptor.ReferencedDocument
                    Dim docFName As String = System.IO.Path.GetFileName(refDoc.FullFileName)

                    Dim descricao As String = SanitizeText(iProperties.Value(docFName, "Project", "Description"))
                    Dim codPeca As String = SanitizeText(iProperties.Value(docFName, "Project", "Part Number"))
                    Dim categoria As String = ""
                    Try
                        categoria = iProperties.Value(docFName, "Custom", "Categoria")
                    Catch
                        categoria = "N/A"
                    End Try
                    If categoria = "" Then categoria = "N/A"

                    Dim itemBOM As String = SearchBOMByPartNumber(BOMRows, codPeca)
                    If itemBOM = "" Then itemBOM = "N/A"

                    If DebugMode Then
                        MsgBox("Doc: " & docFName & vbCrLf & "Descrição: " & descricao & vbCrLf & "Código: " & codPeca & vbCrLf & "Item BOM: " & itemBOM)
                    End If

                    If categoria = "N/A" Or descricao = "X" Or codPeca = "X" Then Continue For

                    If InStr(categoria, " - ") > 0 Then
                        Dim parts() As String = Split(categoria, " - ")
                        If UBound(parts) >= 1 Then categoria = parts(1)
                    End If

                    If Len(descricao) > NomeMaxDescricao Then descricao = Left(descricao, NomeMaxDescricao)

                    Dim novoNome As String = categoria & " - " & itemBOM & " - " & codPeca & " - " & descricao
                    If IsAssemblyDocument(docFName) And Not novoNome.EndsWith("ASS'Y") Then
                        novoNome &= " ASS'Y"
                    End If

                    ' Verifica nomes duplicados
                    If novosNomes.Contains(novoNome) Then
                        novoNome &= " (" & Now.Ticks.ToString().Substring(10) & ")"
                    End If

                    novosNomes.Add(novoNome)
                    renomeadas.AppendLine("• " & dwgSheet.Name & " → " & novoNome)
                    dwgSheet.Name = novoNome
                End If
            Catch ex As Exception
                MsgBox("Erro ao renomear a folha '" & dwgSheet.Name & "': " & ex.Message)
            End Try
        End If
    Next

    ShowFormattedResults(renomeadas.ToString())
End Sub

' ===========================================
Function MultiSelectListBox(Optional Instructions As String = "", Optional Items As IEnumerable = Nothing, Optional DefaultValue As Object = Nothing, Optional Title As String = "", Optional ListName As String = "") As IEnumerable(Of Object)
    Using oILBD As New Autodesk.iLogic.Runtime.InputListBoxDialog(Title, ListName, Instructions, Items, DefaultValue)
        Dim oLB As System.Windows.Forms.ListBox = oILBD.Controls.Item(0).Controls.Item(2)
        oLB.SelectionMode = System.Windows.Forms.SelectionMode.MultiSimple
        oILBD.ShowDialog()
        Return oLB.SelectedItems.Cast(Of Object)()
    End Using
End Function

' ===========================================
Function GetBOMRows() As BOMRowsEnumerator
    Try
        Dim dwgDoc As DrawingDocument = ThisDoc.Document
        Dim firstSheet As Sheet = dwgDoc.Sheets.Item(1)
        If firstSheet.DrawingViews.Count = 0 Then Return Nothing

        Dim refDoc As Document = firstSheet.DrawingViews(1).ReferencedDocumentDescriptor.ReferencedDocument
        If Not TypeOf refDoc Is AssemblyDocument Then Return Nothing

        Dim asmDoc As AssemblyDocument = refDoc
        With asmDoc.ComponentDefinition.BOM
            .StructuredViewEnabled = True
            .StructuredViewFirstLevelOnly = False
            Return .BOMViews.Item("Structured").BOMRows
        End With
    Catch
        Return Nothing
    End Try
End Function

' ===========================================
Function SearchBOMByPartNumber(rows As BOMRowsEnumerator, targetPartNumber As String) As String
    For Each Row As BOMRow In rows
        Try
            Dim def As ComponentDefinition = Row.ComponentDefinitions.Item(1)
            Dim rowPartNumber As String = def.Document.PropertySets.Item("Design Tracking Properties")("Part Number").Value

            If UCase(rowPartNumber) = UCase(targetPartNumber) Then
                Return Row.ItemNumber
            End If
        Catch
        End Try

        If Not Row.ChildRows Is Nothing Then
            Dim result As String = SearchBOMByPartNumber(Row.ChildRows, targetPartNumber)
            If result <> "" Then Return result
        End If
    Next
    Return ""
End Function

' ===========================================
Function SanitizeText(inputText As String) As String
    Dim sanitizedText As String = inputText
    Dim invalidChars As String = "<>:\""/\|?*"
    For Each c As Char In invalidChars
        sanitizedText = sanitizedText.Replace(c, "_")
    Next
    Return sanitizedText
End Function

' ===========================================
Function IsAssemblyDocument(docName As String) As Boolean
    Return UCase(System.IO.Path.GetExtension(docName)) = ".IAM"
End Function

' ===========================================
Sub ShowFormattedResults(message As String)
    Dim form As New System.Windows.Forms.Form
    form.Text = "RESULTADO DA RENOMEAÇÃO"
    form.Width = 600
    form.Height = 400

    Dim richText As New System.Windows.Forms.RichTextBox
    richText.Dock = System.Windows.Forms.DockStyle.Fill
    richText.ReadOnly = True
    richText.AppendText("RENOMEAÇÃO CONCLUÍDA:" & vbCrLf & vbCrLf)
    richText.AppendText(message)

    form.Controls.Add(richText)
    form.ShowDialog()
End Sub
